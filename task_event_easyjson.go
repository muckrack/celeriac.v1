// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package celeriac

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonE9c2c8caDecodeGithubComMuckrackCeleriacV1(in *jlexer.Lexer, out *WorkerEvent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "hostname":
			out.Hostname = string(in.String())
		case "timestamp":
			out.Timestamp = float32(in.Float32())
		case "pid":
			out.PID = int(in.Int())
		case "clock":
			out.Clock = int(in.Int())
		case "utcoffset":
			out.UTCOffset = int(in.Int())
		case "sw_sys":
			out.SWSystem = string(in.String())
		case "sw_ver":
			out.SWVersion = string(in.String())
		case "loadavg":
			if in.IsNull() {
				in.Skip()
				out.LoadAverage = nil
			} else {
				in.Delim('[')
				if out.LoadAverage == nil {
					if !in.IsDelim(']') {
						out.LoadAverage = make([]float32, 0, 16)
					} else {
						out.LoadAverage = []float32{}
					}
				} else {
					out.LoadAverage = (out.LoadAverage)[:0]
				}
				for !in.IsDelim(']') {
					var v1 float32
					v1 = float32(in.Float32())
					out.LoadAverage = append(out.LoadAverage, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "freq":
			out.Freq = float32(in.Float32())
		case "sw_ident":
			out.SWIdentity = string(in.String())
		case "processed":
			out.Processed = int(in.Int())
		case "active":
			out.Active = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE9c2c8caEncodeGithubComMuckrackCeleriacV1(out *jwriter.Writer, in WorkerEvent) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"hostname\":"
		out.RawString(prefix)
		out.String(string(in.Hostname))
	}
	{
		const prefix string = ",\"timestamp\":"
		out.RawString(prefix)
		out.Float32(float32(in.Timestamp))
	}
	{
		const prefix string = ",\"pid\":"
		out.RawString(prefix)
		out.Int(int(in.PID))
	}
	{
		const prefix string = ",\"clock\":"
		out.RawString(prefix)
		out.Int(int(in.Clock))
	}
	{
		const prefix string = ",\"utcoffset\":"
		out.RawString(prefix)
		out.Int(int(in.UTCOffset))
	}
	{
		const prefix string = ",\"sw_sys\":"
		out.RawString(prefix)
		out.String(string(in.SWSystem))
	}
	{
		const prefix string = ",\"sw_ver\":"
		out.RawString(prefix)
		out.String(string(in.SWVersion))
	}
	{
		const prefix string = ",\"loadavg\":"
		out.RawString(prefix)
		if in.LoadAverage == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.LoadAverage {
				if v2 > 0 {
					out.RawByte(',')
				}
				out.Float32(float32(v3))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"freq\":"
		out.RawString(prefix)
		out.Float32(float32(in.Freq))
	}
	{
		const prefix string = ",\"sw_ident\":"
		out.RawString(prefix)
		out.String(string(in.SWIdentity))
	}
	{
		const prefix string = ",\"processed\":"
		out.RawString(prefix)
		out.Int(int(in.Processed))
	}
	{
		const prefix string = ",\"active\":"
		out.RawString(prefix)
		out.Int(int(in.Active))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WorkerEvent) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE9c2c8caEncodeGithubComMuckrackCeleriacV1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WorkerEvent) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE9c2c8caEncodeGithubComMuckrackCeleriacV1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WorkerEvent) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE9c2c8caDecodeGithubComMuckrackCeleriacV1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WorkerEvent) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE9c2c8caDecodeGithubComMuckrackCeleriacV1(l, v)
}
func easyjsonE9c2c8caDecodeGithubComMuckrackCeleriacV11(in *jlexer.Lexer, out *TaskEvent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "hostname":
			out.Hostname = string(in.String())
		case "timestamp":
			out.Timestamp = float32(in.Float32())
		case "pid":
			out.PID = int(in.Int())
		case "clock":
			out.Clock = int(in.Int())
		case "utcoffset":
			out.UTCOffset = int(in.Int())
		case "uuid":
			out.UUID = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "args":
			out.Args = string(in.String())
		case "kwargs":
			out.Kwargs = string(in.String())
		case "result":
			out.Result = string(in.String())
		case "runtime":
			out.Runtime = float32(in.Float32())
		case "retries":
			out.Retries = int(in.Int())
		case "eta":
			if m, ok := out.ETA.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.ETA.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.ETA = in.Interface()
			}
		case "expires":
			if m, ok := out.Expires.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Expires.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Expires = in.Interface()
			}
		case "exception":
			out.Exception = string(in.String())
		case "traceback":
			out.Traceback = string(in.String())
		case "terminated":
			out.Terminated = bool(in.Bool())
		case "signum":
			if m, ok := out.Signum.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Signum.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Signum = in.Interface()
			}
		case "expired":
			out.Expired = bool(in.Bool())
		case "routing_key":
			out.RoutingKey = string(in.String())
		case "queue":
			out.Queue = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE9c2c8caEncodeGithubComMuckrackCeleriacV11(out *jwriter.Writer, in TaskEvent) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"hostname\":"
		out.RawString(prefix)
		out.String(string(in.Hostname))
	}
	{
		const prefix string = ",\"timestamp\":"
		out.RawString(prefix)
		out.Float32(float32(in.Timestamp))
	}
	{
		const prefix string = ",\"pid\":"
		out.RawString(prefix)
		out.Int(int(in.PID))
	}
	{
		const prefix string = ",\"clock\":"
		out.RawString(prefix)
		out.Int(int(in.Clock))
	}
	{
		const prefix string = ",\"utcoffset\":"
		out.RawString(prefix)
		out.Int(int(in.UTCOffset))
	}
	{
		const prefix string = ",\"uuid\":"
		out.RawString(prefix)
		out.String(string(in.UUID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"args\":"
		out.RawString(prefix)
		out.String(string(in.Args))
	}
	{
		const prefix string = ",\"kwargs\":"
		out.RawString(prefix)
		out.String(string(in.Kwargs))
	}
	{
		const prefix string = ",\"result\":"
		out.RawString(prefix)
		out.String(string(in.Result))
	}
	{
		const prefix string = ",\"runtime\":"
		out.RawString(prefix)
		out.Float32(float32(in.Runtime))
	}
	{
		const prefix string = ",\"retries\":"
		out.RawString(prefix)
		out.Int(int(in.Retries))
	}
	{
		const prefix string = ",\"eta\":"
		out.RawString(prefix)
		if m, ok := in.ETA.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.ETA.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.ETA))
		}
	}
	{
		const prefix string = ",\"expires\":"
		out.RawString(prefix)
		if m, ok := in.Expires.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Expires.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Expires))
		}
	}
	{
		const prefix string = ",\"exception\":"
		out.RawString(prefix)
		out.String(string(in.Exception))
	}
	{
		const prefix string = ",\"traceback\":"
		out.RawString(prefix)
		out.String(string(in.Traceback))
	}
	{
		const prefix string = ",\"terminated\":"
		out.RawString(prefix)
		out.Bool(bool(in.Terminated))
	}
	{
		const prefix string = ",\"signum\":"
		out.RawString(prefix)
		if m, ok := in.Signum.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Signum.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Signum))
		}
	}
	{
		const prefix string = ",\"expired\":"
		out.RawString(prefix)
		out.Bool(bool(in.Expired))
	}
	if in.RoutingKey != "" {
		const prefix string = ",\"routing_key\":"
		out.RawString(prefix)
		out.String(string(in.RoutingKey))
	}
	if in.Queue != "" {
		const prefix string = ",\"queue\":"
		out.RawString(prefix)
		out.String(string(in.Queue))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TaskEvent) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE9c2c8caEncodeGithubComMuckrackCeleriacV11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TaskEvent) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE9c2c8caEncodeGithubComMuckrackCeleriacV11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TaskEvent) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE9c2c8caDecodeGithubComMuckrackCeleriacV11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TaskEvent) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE9c2c8caDecodeGithubComMuckrackCeleriacV11(l, v)
}
func easyjsonE9c2c8caDecodeGithubComMuckrackCeleriacV12(in *jlexer.Lexer, out *Event) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "hostname":
			out.Hostname = string(in.String())
		case "timestamp":
			out.Timestamp = float32(in.Float32())
		case "pid":
			out.PID = int(in.Int())
		case "clock":
			out.Clock = int(in.Int())
		case "utcoffset":
			out.UTCOffset = int(in.Int())
		case "data":
			if m, ok := out.Data.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Data.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Data = in.Interface()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE9c2c8caEncodeGithubComMuckrackCeleriacV12(out *jwriter.Writer, in Event) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"hostname\":"
		out.RawString(prefix)
		out.String(string(in.Hostname))
	}
	{
		const prefix string = ",\"timestamp\":"
		out.RawString(prefix)
		out.Float32(float32(in.Timestamp))
	}
	{
		const prefix string = ",\"pid\":"
		out.RawString(prefix)
		out.Int(int(in.PID))
	}
	{
		const prefix string = ",\"clock\":"
		out.RawString(prefix)
		out.Int(int(in.Clock))
	}
	{
		const prefix string = ",\"utcoffset\":"
		out.RawString(prefix)
		out.Int(int(in.UTCOffset))
	}
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix)
		if m, ok := in.Data.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Data.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Data))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Event) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE9c2c8caEncodeGithubComMuckrackCeleriacV12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Event) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE9c2c8caEncodeGithubComMuckrackCeleriacV12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Event) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE9c2c8caDecodeGithubComMuckrackCeleriacV12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Event) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE9c2c8caDecodeGithubComMuckrackCeleriacV12(l, v)
}
